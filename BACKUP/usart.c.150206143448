#include <iom16v.h>
#include <macros.h>
#include "usart.h"

#define uchar unsigned char
#define uint  unsigned int
#define F_CPU 3686400

/*-----------------------------------------------------------------
函数名称: void Usart_init01(void) 
函数功能: 串口初始化方式01（波特率设置用查表）
		  波特率 9600 0.2% ，8bit，异步，倍速，无奇偶校验，1个停止位
参    数: 
返 回 值: 无
-----------------------------------------------------------------*/
void Usart_init01(void)       //初始化串口方式1
{
  UCSRA=0X02;                 //倍速选择
  UCSRB=(1<<RXEN)|(1<<TXEN);  //使能接收，发送
  UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);//8bit，异步，无奇偶校验，1个停止位
  UBRR=47; //9600波特率，见M16_cn中文P155:Table68-72通用振荡器频率下设置 UBRR 																	   
}
/*-----------------------------------------------------------------
函数名称: void Usart_init02(void) 
函数功能: 串口初始化方式02（波特率设置用公式）
		  波特率 9600 0.2% 8bit，异步，常速，无奇偶校验，2个停止位
参    数: 
返 回 值: 无
-----------------------------------------------------------------*/
void Usart_init02( uint baud )//初始化串口方式2，并设置波特率
{
uint tmp;
tmp= F_CPU/baud/16-1;        //设置波特率，见M16_cn中文P135:Table60波特率计算公式 
UBRRH = (uchar)(tmp>>8);
UBRRL = (uchar)tmp;
UCSRB = (1<<RXEN)|(1<<TXEN); //接收器与发送器使能
UCSRC = (1<<URSEL)|(1<<USBS)|(1<<UCSZ0)|(1<<UCSZ1);//异步，8bit,2停止位,无奇偶校验
}
/*-----------------------------------------------------------------
函数名称: void Usart_init03(void) 
函数功能: 串口初始化方式03（中断方式接收）
		  波特率 9600 0.2%，8bit，异步，倍速，无奇偶校验，1个停止位
参    数: 
返 回 值: 无
-----------------------------------------------------------------*/
void Usart_init03(void)
{
 	UCSRB = 0x00; 					       //关串口
 	UCSRA = 0x02;					       //倍速模式   M16中文P151
 	UCSRC = BIT(URSEL) | 0x06;		       //写UCSRC寄存器,设定8个bit，1停止位，异步
 	UBRR  = 12;	 	  	   		           //设定串口波特率为9600
 	UCSRB = (1<<RXCIE)|(1<<RXEN)|(1<<TXEN);//使能接收结束中断，使能收发
}

#pragma interrupt_handler UartRecvData:12
void UartRecvData(void)
{
 	uchar temp;
	temp = UDR;
	if(temp=='shutdown')					//如果接到到1，则开启一次ADC转换
	LCD_clear();						//开启一次ADC转换
	    
}

/*-----------------------------------------------------------------
函数名称: void USART_Transmit( unsigned char data ) 
函数功能: 数据发送【发送5 到8 位数据位的帧】
参    数: 
返 回 值: 无
说    明：直接从数据手册上拷贝过来的
-----------------------------------------------------------------*/
void USART_Transmit( uchar data )
{
while ( !( UCSRA & (1<<UDRE)) ) ;  //等待发送缓冲器为空
UDR = data;                        // 将数据放入缓冲器，发送数据 
} 
/*-----------------------------------------------------------------
函数名称: unsigned char USART_Receive( void )
函数功能: 数据接收【以5 到8 个数据位的方式接收数 据帧】
参    数: 
返 回 值: UDR
说    明：直接从数据手册上拷贝过来的
-----------------------------------------------------------------*/
uchar USART_Receive( void )
{
while ( !(UCSRA & (1<<RXC)) );  // 等待接收数据
return UDR;                     // 从缓冲器中获取并返回数据
} 
/*-----------------------------------------------------------------
函数名称: void USART_Transmits01( void )
函数功能: 连续发送字符"Hello"
参    数: 
返 回 值: 
-----------------------------------------------------------------*/
void USART_Transmits01( void )
{
while ( !( UCSRA & (1<<UDRE)) );
UDR = 'H';
while ( !( UCSRA & (1<<UDRE)) );
UDR = 'e';
while ( !( UCSRA & (1<<UDRE)) );
UDR = 'l';
while ( !( UCSRA & (1<<UDRE)) );
UDR = 'l';
while ( !( UCSRA & (1<<UDRE)) );
UDR = 'o';
} 

/*-----------------------------------------------------------------
函数名称: void USART_Transmits02(unsigned char *str)
函数功能: 发送字符串（方法一）
参    数: str  发送字符串的首地址
返 回 值: 
说    明：已通过验证，str必须定义为指针，调用时只需指针名即可
例    如：定义指针    uchar *buffer0="2009年03月26日23:40";
          调用函数    USART_Transmits02(buffer0);  即可
-----------------------------------------------------------------*/
void USART_Transmits02(uchar *ptr)//字符串
{
   while (*ptr)
   {
       USART_Transmit(*ptr);
       *ptr++;
   }
   newline();
}

/*-----------------------------------------------------------------
函数名称: void USART_Transmits03(uchar *str, uint len)
函数功能: 发送字符串（方法二）
参    数: str   发送字符串的首地址
	  	  len   发送字符串的长度
返 回 值: 
说    明：已通过验证，str必须定义为指针，调用时只需指针名即可
例    如：定义指针    uchar *buffer0="2009年03月26日23:40";
          调用函数    USART_Transmits03(buffer0,19);  即可
-----------------------------------------------------------------*/
void USART_Transmits03(uchar *str,uint len)
{
 	uint i;
	for( i = 0; i < len; i++)
	{
  		while ( !( UCSRA & (1<<UDRE)) );  //等待发送缓冲器为空  	
		UDR = str[i];
	}
}

void newline(void)   //换行
{
   USART_Transmit(0x0d);  //发送一个回车
   USART_Transmit(0x0a);  //发送一个换行
}

void blank(void)    //空格
{
   USART_Transmit(0x20);  
}


/************************************************
  UMSEL  模式选择
    0    异步操作
    1    同步操作

  USBS 停止位位数
    0     1
    1     2

  UCSZ2 UCSZ1 UCSZ0 字符长度
    0     0     0     5 位
    0     0     1     6 位
    0     1     0     7 位
    0     1     1     8 位
    1     0     0     保留
    1     0     1     保留
    1     1     0     保留
    1     1     1     9 位
*************************************************/